/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shiftCipher;

/**
 *
 * @author Shane Bishop
 */
public class ShiftCipher extends javax.swing.JFrame {

    /**
     * Creates new form ShiftCipher
     */
    public ShiftCipher() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        plaintextLabel = new javax.swing.JLabel();
        shiftLabel = new javax.swing.JLabel();
        shiftButton = new javax.swing.JButton();
        ciphertextLabel = new javax.swing.JLabel();
        plaintextField = new javax.swing.JTextField();
        shiftField = new javax.swing.JTextField();
        ciphertextField = new javax.swing.JTextField();
        messageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        plaintextLabel.setText("Plaintext:");

        shiftLabel.setText("Shift by:");

        shiftButton.setText("Shift!");
        shiftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shiftButtonActionPerformed(evt);
            }
        });

        ciphertextLabel.setText("Ciphertext:");

        shiftField.setToolTipText("Enter an integer value.");

        ciphertextField.setEditable(false);

        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(shiftButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ciphertextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ciphertextField, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(plaintextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(plaintextField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(shiftLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shiftField)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plaintextLabel)
                    .addComponent(plaintextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shiftLabel)
                    .addComponent(shiftField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(shiftButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ciphertextLabel)
                    .addComponent(ciphertextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shiftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shiftButtonActionPerformed
        try {
            //remove existing ciphertext
            ciphertextField.setText("");
            
            //get the input message string
            String plaintext = plaintextField.getText();
            
            //get the shift value
            int shiftAmount = Integer.parseInt(shiftField.getText());
            
            //if either value is missing or inappropriate, given an error
            //message, clear the output area, and stop
            checkForSpecialCharacters(plaintext);
            
            //shift the message string to produce the encrypted string
            String ciphertext = shiftCipher(plaintext, shiftAmount);
            
            //output the encrypted string
            ciphertextField.setText(ciphertext);
        }
        catch (NumberFormatException nfe) {
            //not an integer
            messageLabel.setText("Please enter an integer value for shift.");
        }
        catch(Exception e) {
            //special characters in the plaintext
            messageLabel.setText("Please enter plaintext message with no "
                    + "special characters.");
        }
    }//GEN-LAST:event_shiftButtonActionPerformed

    /**
     * 
     * @param s
     * @throws Exception 
     */
    private void checkForSpecialCharacters(String s) throws Exception {
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) < 32 || s.charAt(i) > 126) throw new Exception();
        }
    }
    
    /**
     * 
     * @param p
     * @param s
     * @return 
     */
    private String shiftCipher (String p, int s) {
        //convert the input String, or plaintext, to an array of characters
        char[] ptArray = p.toCharArray();
        
        //create a new array of characters to hold the output String, or
        //ciphertext
        char[] ctArray = new char[ptArray.length];
        
        //for each charater in the plaintext array, shift by the specified
        //amount and put the result in the ciphertext
        for (int i = 0; i < ptArray.length; i++) {
            int ascii = (int)ptArray[i];
            ascii = (ascii - 32 + s)%95 + 32;
            ctArray[i] = (char)ascii;
        }
        
        //convert the ciphertext array to a String
        String c = new String(ctArray);
        return c;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShiftCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShiftCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShiftCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShiftCipher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShiftCipher().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ciphertextField;
    private javax.swing.JLabel ciphertextLabel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JTextField plaintextField;
    private javax.swing.JLabel plaintextLabel;
    private javax.swing.JButton shiftButton;
    private javax.swing.JTextField shiftField;
    private javax.swing.JLabel shiftLabel;
    // End of variables declaration//GEN-END:variables
}
